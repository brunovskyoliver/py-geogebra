name: Build

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            suffix: -linux
            ext: ''
          - os: macos-latest
            suffix: -darwin
            ext: '.app'
          - os: windows-latest
            suffix: -windows
            ext: '.exe'
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller -r requirements.txt

      - name: Create .env file from secrets
        run: |
          echo "API_AUDIENCE=${{ secrets.API_AUDIENCE }}" > .env
          echo "AUTH0_CALLBACK_URL=${{ secrets.AUTH0_CALLBACK_URL }}" >> .env
          echo "AUTH0_CLIENT_ID=${{ secrets.AUTH0_CLIENT_ID }}" >> .env
          echo "AUTH0_CLIENT_SECRET=${{ secrets.AUTH0_CLIENT_SECRET }}" >> .env
          echo "AUTH0_DOMAIN=${{ secrets.AUTH0_DOMAIN }}" >> .env
          echo "TURSO_AUTH_TOKEN=${{ secrets.TURSO_AUTH_TOKEN }}" >> .env
          echo "TURSO_URL=${{ secrets.TURSO_URL }}" >> .env


      - name: Build with PyInstaller
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            python -m PyInstaller \
              --windowed \
              --noconfirm \
              --name py-geogebra${{ matrix.suffix }} \
              --add-data "locales:locales" \
              --add-data "resources:resources" \
              --add-data ".env:.env"
              --add-data "py_geogebra/flask/templates:py_geogebra/flask/templates" \
              --hidden-import=requests \
              --hidden-import=dotenv \
              --hidden-import=libsql_client \
              --hidden-import=flask \
              --hidden-import=threading \
              main.py
          else
            python -m PyInstaller \
              --onefile \
              --noconsole \
              --noconfirm \
              --name py-geogebra${{ matrix.suffix }} \
              --add-data "locales${{ runner.os == 'Windows' && ';' || ':' }}locales" \
              --add-data "resources:resources" \
              --add-data ".env:." \
              --add-data "py_geogebra/flask/templates:py_geogebra/flask/templates" \
              --hidden-import=requests \
              --hidden-import=dotenv \
              --hidden-import=libsql_client \
              --hidden-import=flask \
              --hidden-import=threading \
              main.py
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: py-geogebra${{ matrix.suffix }}
          path: dist/**
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Read version
        run: |
          echo "version=$(python -c 'import py_geogebra.config as v; print(v.__version__)')" >> $GITHUB_ENV

      - name: Make executables runnable (Linux/macOS)
        shell: bash
        run: |
          chmod +x dist/**/py-geogebra*-linux || true
          find dist -path "*/py-geogebra*-darwin.app/Contents/MacOS/*" -type f -exec chmod +x {} \; || true

      - name: Package releases
        run: |
          mkdir -p packaged
          for f in dist/**/py-geogebra*-linux; do
            [ -f "$f" ] && tar -czf "packaged/$(basename $f).tar.gz" -C "$(dirname "$f")" "$(basename "$f")"
          done

          for d in dist/**/py-geogebra*-darwin.app; do
            [ -d "$d" ] && zip -r "packaged/$(basename $d).zip" "$d"
          done

          for f in dist/**/py-geogebra*-windows.exe; do
            [ -f "$f" ] && cp "$f" packaged/
          done

      - name: Publish GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.version }}
          name: "PyGeoGebra v${{ env.version }}"
          make_latest: true
          files: |
            packaged/py-geogebra*-windows.exe
            packaged/py-geogebra*-darwin*.zip
            packaged/py-geogebra*-linux*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

